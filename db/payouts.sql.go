// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: payouts.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addEventToPayout = `-- name: AddEventToPayout :one
insert into payout_events (
  payout_id, event_id
) values (
  $1, $2
) returning payout_id, event_id
`

type AddEventToPayoutParams struct {
	PayoutID uuid.UUID `json:"payout_id"`
	EventID  uuid.UUID `json:"event_id"`
}

func (q *Queries) AddEventToPayout(ctx context.Context, arg AddEventToPayoutParams) (PayoutEvent, error) {
	row := q.db.QueryRow(ctx, addEventToPayout, arg.PayoutID, arg.EventID)
	var i PayoutEvent
	err := row.Scan(&i.PayoutID, &i.EventID)
	return i, err
}

const createPayout = `-- name: CreatePayout :one
insert into payouts (
  id, user_id, date, amount, client_id, created_at, updated_at
) values (
  $1, $2, NOW(), $3, $4, NOW(), NOW()
) returning id, user_id, client_id, date, amount, created_at, updated_at
`

type CreatePayoutParams struct {
	ID       uuid.UUID   `json:"id"`
	UserID   uuid.UUID   `json:"user_id"`
	Amount   int32       `json:"amount"`
	ClientID pgtype.UUID `json:"client_id"`
}

func (q *Queries) CreatePayout(ctx context.Context, arg CreatePayoutParams) (Payout, error) {
	row := q.db.QueryRow(ctx, createPayout,
		arg.ID,
		arg.UserID,
		arg.Amount,
		arg.ClientID,
	)
	var i Payout
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.Date,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePayout = `-- name: DeletePayout :exec
delete from payouts
where id = $1
`

func (q *Queries) DeletePayout(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePayout, id)
	return err
}

const getPayout = `-- name: GetPayout :one
select 
  payouts.id,
  payouts.user_id,
  payouts.date,
  payouts.amount,
  payouts.created_at,
  payouts.updated_at,
  clients.id as client_id,
  clients.fname as client_fname,
  clients.lname as client_lname
from payouts
left join clients on payouts.client_id = clients.id
where payouts.id = $1
`

type GetPayoutRow struct {
	ID          uuid.UUID        `json:"id"`
	UserID      uuid.UUID        `json:"user_id"`
	Date        pgtype.Timestamp `json:"date"`
	Amount      int32            `json:"amount"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	ClientID    pgtype.UUID      `json:"client_id"`
	ClientFname pgtype.Text      `json:"client_fname"`
	ClientLname pgtype.Text      `json:"client_lname"`
}

func (q *Queries) GetPayout(ctx context.Context, id uuid.UUID) (GetPayoutRow, error) {
	row := q.db.QueryRow(ctx, getPayout, id)
	var i GetPayoutRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Date,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClientID,
		&i.ClientFname,
		&i.ClientLname,
	)
	return i, err
}

const getPayouts = `-- name: GetPayouts :many
select
  payouts.id,
  payouts.user_id,
  payouts.date,
  payouts.amount,
  payouts.created_at,
  payouts.updated_at,
  clients.id as client_id,
  clients.fname as client_fname,
  clients.lname as client_lname
from payouts
left join clients on payouts.client_id = clients.id
where payouts.user_id = $1 or clients.id = $1
`

type GetPayoutsRow struct {
	ID          uuid.UUID        `json:"id"`
	UserID      uuid.UUID        `json:"user_id"`
	Date        pgtype.Timestamp `json:"date"`
	Amount      int32            `json:"amount"`
	CreatedAt   pgtype.Timestamp `json:"created_at"`
	UpdatedAt   pgtype.Timestamp `json:"updated_at"`
	ClientID    pgtype.UUID      `json:"client_id"`
	ClientFname pgtype.Text      `json:"client_fname"`
	ClientLname pgtype.Text      `json:"client_lname"`
}

func (q *Queries) GetPayouts(ctx context.Context, userID uuid.UUID) ([]GetPayoutsRow, error) {
	rows, err := q.db.Query(ctx, getPayouts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPayoutsRow
	for rows.Next() {
		var i GetPayoutsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Date,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClientID,
			&i.ClientFname,
			&i.ClientLname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
