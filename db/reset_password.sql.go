// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reset_password.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createResetPasswordToken = `-- name: CreateResetPasswordToken :one
INSERT INTO reset_password (
  user_id,
  reset_token,
  requested_at,
  expires_at
) VALUES (
  $1,
  $2,
  NOW(),
  NOW() + INTERVAL '1 hour'
) RETURNING id, user_id, reset_token, requested_at, expires_at
`

type CreateResetPasswordTokenParams struct {
	UserID     uuid.UUID `json:"user_id"`
	ResetToken string    `json:"reset_token"`
}

func (q *Queries) CreateResetPasswordToken(ctx context.Context, arg CreateResetPasswordTokenParams) (ResetPassword, error) {
	row := q.db.QueryRow(ctx, createResetPasswordToken, arg.UserID, arg.ResetToken)
	var i ResetPassword
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResetToken,
		&i.RequestedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteExpiredResetTokens = `-- name: DeleteExpiredResetTokens :exec
DELETE FROM reset_password WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredResetTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredResetTokens)
	return err
}

const getResetPasswordToken = `-- name: GetResetPasswordToken :one
SELECT id, user_id, reset_token, requested_at, expires_at FROM reset_password WHERE reset_token = $1 AND expires_at > NOW()
`

func (q *Queries) GetResetPasswordToken(ctx context.Context, resetToken string) (ResetPassword, error) {
	row := q.db.QueryRow(ctx, getResetPasswordToken, resetToken)
	var i ResetPassword
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResetToken,
		&i.RequestedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getResetPasswordTokenByUser = `-- name: GetResetPasswordTokenByUser :one
SELECT id, user_id, reset_token, requested_at, expires_at FROM reset_password
WHERE user_id = $1
  AND expires_at > NOW()
`

func (q *Queries) GetResetPasswordTokenByUser(ctx context.Context, userID uuid.UUID) (ResetPassword, error) {
	row := q.db.QueryRow(ctx, getResetPasswordTokenByUser, userID)
	var i ResetPassword
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ResetToken,
		&i.RequestedAt,
		&i.ExpiresAt,
	)
	return i, err
}
