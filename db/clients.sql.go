// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clients.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const batchArchiveClients = `-- name: BatchArchiveClients :exec
UPDATE clients
SET
  isarchived = true
WHERE
  id = ANY($1::uuid[])
`

func (q *Queries) BatchArchiveClients(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.Exec(ctx, batchArchiveClients, dollar_1)
	return err
}

const createClient = `-- name: CreateClient :one
INSERT INTO clients (
  user_id, fname, lname, email, phone, rate, balanceNotifyThreshold, id, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW()
) RETURNING id, user_id, fname, lname, email, phone, balance, balancenotifythreshold, rate, isarchived, created_at, updated_at
`

type CreateClientParams struct {
	UserID                 uuid.UUID   `json:"user_id"`
	Fname                  string      `json:"fname"`
	Lname                  pgtype.Text `json:"lname"`
	Email                  pgtype.Text `json:"email"`
	Phone                  pgtype.Text `json:"phone"`
	Rate                   int32       `json:"rate"`
	Balancenotifythreshold int32       `json:"balancenotifythreshold"`
	ID                     uuid.UUID   `json:"id"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRow(ctx, createClient,
		arg.UserID,
		arg.Fname,
		arg.Lname,
		arg.Email,
		arg.Phone,
		arg.Rate,
		arg.Balancenotifythreshold,
		arg.ID,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.Phone,
		&i.Balance,
		&i.Balancenotifythreshold,
		&i.Rate,
		&i.Isarchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients
WHERE id = ANY($1::uuid[])
`

func (q *Queries) DeleteClient(ctx context.Context, dollar_1 []uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteClient, dollar_1)
	return err
}

const getClient = `-- name: GetClient :one
SELECT id, user_id, fname, lname, email, phone, balance, balancenotifythreshold, rate, isarchived, created_at, updated_at
FROM clients
WHERE id = $1
`

func (q *Queries) GetClient(ctx context.Context, id uuid.UUID) (Client, error) {
	row := q.db.QueryRow(ctx, getClient, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.Phone,
		&i.Balance,
		&i.Balancenotifythreshold,
		&i.Rate,
		&i.Isarchived,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClients = `-- name: GetClients :many
SELECT id, user_id, fname, lname, email, phone, balance, balancenotifythreshold, rate, isarchived, created_at, updated_at
FROM clients
WHERE clients.user_id = $1
`

func (q *Queries) GetClients(ctx context.Context, userID uuid.UUID) ([]Client, error) {
	rows, err := q.db.Query(ctx, getClients, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Fname,
			&i.Lname,
			&i.Email,
			&i.Phone,
			&i.Balance,
			&i.Balancenotifythreshold,
			&i.Rate,
			&i.Isarchived,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :exec
UPDATE clients
SET
    fname = $2,
    lname = $3,
    email = $4,
    balance = $5,
    balancenotifythreshold = $6,
    rate = $7,
    isarchived = $8,
    phone = $9,
    updated_at = NOW()
WHERE
    id = $1
`

type UpdateClientParams struct {
	ID                     uuid.UUID   `json:"id"`
	Fname                  string      `json:"fname"`
	Lname                  pgtype.Text `json:"lname"`
	Email                  pgtype.Text `json:"email"`
	Balance                int32       `json:"balance"`
	Balancenotifythreshold int32       `json:"balancenotifythreshold"`
	Rate                   int32       `json:"rate"`
	Isarchived             pgtype.Bool `json:"isarchived"`
	Phone                  pgtype.Text `json:"phone"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) error {
	_, err := q.db.Exec(ctx, updateClient,
		arg.ID,
		arg.Fname,
		arg.Lname,
		arg.Email,
		arg.Balance,
		arg.Balancenotifythreshold,
		arg.Rate,
		arg.Isarchived,
		arg.Phone,
	)
	return err
}

const updateClientBalance = `-- name: UpdateClientBalance :exec
UPDATE clients SET balance = $2 WHERE id = $1
`

type UpdateClientBalanceParams struct {
	ID      uuid.UUID `json:"id"`
	Balance int32     `json:"balance"`
}

func (q *Queries) UpdateClientBalance(ctx context.Context, arg UpdateClientBalanceParams) error {
	_, err := q.db.Exec(ctx, updateClientBalance, arg.ID, arg.Balance)
	return err
}
