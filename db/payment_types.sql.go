// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment_types.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPaymentType = `-- name: CreatePaymentType :one
INSERT INTO payment_types (
  user_id, "name"
) VALUES (
  $1, $2
) RETURNING id, user_id, name
`

type CreatePaymentTypeParams struct {
	UserID pgtype.UUID `json:"user_id"`
	Name   string      `json:"name"`
}

func (q *Queries) CreatePaymentType(ctx context.Context, arg CreatePaymentTypeParams) (PaymentType, error) {
	row := q.db.QueryRow(ctx, createPaymentType, arg.UserID, arg.Name)
	var i PaymentType
	err := row.Scan(&i.ID, &i.UserID, &i.Name)
	return i, err
}

const deletePaymentType = `-- name: DeletePaymentType :exec
DELETE FROM payment_types WHERE user_id = $1 AND id = $2
`

type DeletePaymentTypeParams struct {
	UserID pgtype.UUID `json:"user_id"`
	ID     int32       `json:"id"`
}

func (q *Queries) DeletePaymentType(ctx context.Context, arg DeletePaymentTypeParams) error {
	_, err := q.db.Exec(ctx, deletePaymentType, arg.UserID, arg.ID)
	return err
}

const getDefaultPaymentTypes = `-- name: GetDefaultPaymentTypes :many
SELECT id, user_id, name
FROM payment_types
WHERE user_id IS NULL
`

func (q *Queries) GetDefaultPaymentTypes(ctx context.Context) ([]PaymentType, error) {
	rows, err := q.db.Query(ctx, getDefaultPaymentTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentType
	for rows.Next() {
		var i PaymentType
		if err := rows.Scan(&i.ID, &i.UserID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentType = `-- name: GetPaymentType :one
SELECT id, user_id, name
FROM payment_types
WHERE id = $1 AND user_id = $2
`

type GetPaymentTypeParams struct {
	ID     int32       `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) GetPaymentType(ctx context.Context, arg GetPaymentTypeParams) (PaymentType, error) {
	row := q.db.QueryRow(ctx, getPaymentType, arg.ID, arg.UserID)
	var i PaymentType
	err := row.Scan(&i.ID, &i.UserID, &i.Name)
	return i, err
}

const getPaymentTypes = `-- name: GetPaymentTypes :many
SELECT id, user_id, name 
FROM payment_types
WHERE user_id = $1 OR $1 IS NULL
`

func (q *Queries) GetPaymentTypes(ctx context.Context, userID pgtype.UUID) ([]PaymentType, error) {
	rows, err := q.db.Query(ctx, getPaymentTypes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PaymentType
	for rows.Next() {
		var i PaymentType
		if err := rows.Scan(&i.ID, &i.UserID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentType = `-- name: UpdatePaymentType :one
UPDATE payment_types
SET
  "name" = $3
WHERE
  user_id = $1 AND id = $2
RETURNING id, user_id, name
`

type UpdatePaymentTypeParams struct {
	UserID pgtype.UUID `json:"user_id"`
	ID     int32       `json:"id"`
	Name   string      `json:"name"`
}

func (q *Queries) UpdatePaymentType(ctx context.Context, arg UpdatePaymentTypeParams) (PaymentType, error) {
	row := q.db.QueryRow(ctx, updatePaymentType, arg.UserID, arg.ID, arg.Name)
	var i PaymentType
	err := row.Scan(&i.ID, &i.UserID, &i.Name)
	return i, err
}
