// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id, fname, lname, email, "hash", nameforheader, license, rate, created_at, updated_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW()
) RETURNING
    id, 
    fname, 
    lname, 
    email, 
    nameforheader, 
    license, 
    created_at, 
    updated_at
`

type CreateUserParams struct {
	ID            uuid.UUID   `json:"id"`
	Fname         string      `json:"fname"`
	Lname         string      `json:"lname"`
	Email         string      `json:"email"`
	Hash          string      `json:"hash"`
	Nameforheader string      `json:"nameforheader"`
	License       pgtype.Text `json:"license"`
	Rate          pgtype.Int4 `json:"rate"`
}

type CreateUserRow struct {
	ID            uuid.UUID        `json:"id"`
	Fname         string           `json:"fname"`
	Lname         string           `json:"lname"`
	Email         string           `json:"email"`
	Nameforheader string           `json:"nameforheader"`
	License       pgtype.Text      `json:"license"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Fname,
		arg.Lname,
		arg.Email,
		arg.Hash,
		arg.Nameforheader,
		arg.License,
		arg.Rate,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.Nameforheader,
		&i.License,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT 
    id, 
    fname, 
    lname, 
    email, 
    nameforheader, 
    license, 
    rate,
    created_at, 
    updated_at 
FROM users
WHERE id = $1
`

type GetUserRow struct {
	ID            uuid.UUID        `json:"id"`
	Fname         string           `json:"fname"`
	Lname         string           `json:"lname"`
	Email         string           `json:"email"`
	Nameforheader string           `json:"nameforheader"`
	License       pgtype.Text      `json:"license"`
	Rate          pgtype.Int4      `json:"rate"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.Nameforheader,
		&i.License,
		&i.Rate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, fname, lname, email, hash, nameforheader, license, created_at, updated_at, rate FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.Hash,
		&i.Nameforheader,
		&i.License,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Rate,
	)
	return i, err
}

const getUserHash = `-- name: GetUserHash :one
SELECT "hash" FROM users
WHERE id = $1
`

func (q *Queries) GetUserHash(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRow(ctx, getUserHash, id)
	var hash string
	err := row.Scan(&hash)
	return hash, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    fname = $1,
    lname = $2,
    nameForHeader = $3,
    license = $4,
    rate = $5,
    updated_at = NOW()
WHERE
    id = $6
RETURNING 
    id, 
    fname, 
    lname, 
    email, 
    nameforheader, 
    license, 
    rate,
    created_at, 
    updated_at
`

type UpdateUserParams struct {
	Fname         string      `json:"fname"`
	Lname         string      `json:"lname"`
	Nameforheader string      `json:"nameforheader"`
	License       pgtype.Text `json:"license"`
	Rate          pgtype.Int4 `json:"rate"`
	ID            uuid.UUID   `json:"id"`
}

type UpdateUserRow struct {
	ID            uuid.UUID        `json:"id"`
	Fname         string           `json:"fname"`
	Lname         string           `json:"lname"`
	Email         string           `json:"email"`
	Nameforheader string           `json:"nameforheader"`
	License       pgtype.Text      `json:"license"`
	Rate          pgtype.Int4      `json:"rate"`
	CreatedAt     pgtype.Timestamp `json:"created_at"`
	UpdatedAt     pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Fname,
		arg.Lname,
		arg.Nameforheader,
		arg.License,
		arg.Rate,
		arg.ID,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.ID,
		&i.Fname,
		&i.Lname,
		&i.Email,
		&i.Nameforheader,
		&i.License,
		&i.Rate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET
    "hash" = $2
WHERE
    id = $1
`

type UpdateUserPasswordParams struct {
	ID   uuid.UUID `json:"id"`
	Hash string    `json:"hash"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.Hash)
	return err
}
